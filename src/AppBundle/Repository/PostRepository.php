<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Post;
use Doctrine\ORM\EntityRepository as ORM;
use Doctrine\ORM\Query;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends ORM
{

	/**
	 * @return Query
	 * @param $id
	 */
	public function queryLatest($id)
	{
		return $this->getEntityManager()
			->createQuery('
                SELECT i
                FROM AppBundle:Post i
                WHERE i.id <=:id
                ORDER BY i.id DESC
            ')
			->setParameter('id', $id);
			;
	}

	/**
	 * @return Query
	 * @param $author
	 */
	public function queryAuthor($author)
	{
		return $this->getEntityManager()
			->createQuery('
                SELECT i
                FROM AppBundle:Post i
                WHERE i.author =:author
                ORDER BY i.id DESC
            ')
			->setParameter('author', $author);
	}

	/**
	 * @return Query
	 * @param int $count
	 * @param int $next
	 */
	public function findLatest($count, $next) {
		$id = $next;
		$query = $this->queryLatest($id)->setMaxResults($count);
		return $query;
	}

	public function getHighestId() {

		$highest_id = $this->createQueryBuilder('e')
			->select('MAX(e.id)')
			->from('AppBundle:Post', 's')
			->getQuery()
			->getSingleScalarResult();
		return $highest_id;
	}

	/**
	 * @param int $page
	 *
	 * @return Pagerfanta
	 */
	public function paginate($page = 1)
	{

		$id = $this->getHighestId();

		$paginator = new Pagerfanta(new DoctrineORMAdapter($this->queryLatest($id), false));
		$paginator->setMaxPerPage(Post::NUM_ITEMS);
		$paginator->setCurrentPage($page);

		return $paginator;
	}

	public function paginateAuthor($page, $author)
	{

		$id = $this->getHighestId();

		$paginator = new Pagerfanta(new DoctrineORMAdapter($this->queryAuthor($author), false));
		$paginator->setMaxPerPage(10);
		$paginator->setCurrentPage($page);

		return $paginator;
	}

}
